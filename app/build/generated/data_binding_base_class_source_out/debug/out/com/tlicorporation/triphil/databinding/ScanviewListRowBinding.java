// Generated by view binder compiler. Do not edit!
package com.tlicorporation.triphil.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tlicorporation.triphil.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ScanviewListRowBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView imageViewDelete;

  @NonNull
  public final TextView tvCarton;

  @NonNull
  public final TextView tvDeliveryDateContainer;

  @NonNull
  public final TextView tvModel;

  @NonNull
  public final TextView tvQty;

  @NonNull
  public final TextView tvRefNo;

  @NonNull
  public final TextView tvRowNo;

  @NonNull
  public final TextView tvScanID;

  private ScanviewListRowBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView imageViewDelete, @NonNull TextView tvCarton,
      @NonNull TextView tvDeliveryDateContainer, @NonNull TextView tvModel, @NonNull TextView tvQty,
      @NonNull TextView tvRefNo, @NonNull TextView tvRowNo, @NonNull TextView tvScanID) {
    this.rootView = rootView;
    this.imageViewDelete = imageViewDelete;
    this.tvCarton = tvCarton;
    this.tvDeliveryDateContainer = tvDeliveryDateContainer;
    this.tvModel = tvModel;
    this.tvQty = tvQty;
    this.tvRefNo = tvRefNo;
    this.tvRowNo = tvRowNo;
    this.tvScanID = tvScanID;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ScanviewListRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ScanviewListRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.scanview_list_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ScanviewListRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageViewDelete;
      ImageView imageViewDelete = ViewBindings.findChildViewById(rootView, id);
      if (imageViewDelete == null) {
        break missingId;
      }

      id = R.id.tvCarton;
      TextView tvCarton = ViewBindings.findChildViewById(rootView, id);
      if (tvCarton == null) {
        break missingId;
      }

      id = R.id.tvDeliveryDateContainer;
      TextView tvDeliveryDateContainer = ViewBindings.findChildViewById(rootView, id);
      if (tvDeliveryDateContainer == null) {
        break missingId;
      }

      id = R.id.tvModel;
      TextView tvModel = ViewBindings.findChildViewById(rootView, id);
      if (tvModel == null) {
        break missingId;
      }

      id = R.id.tvQty;
      TextView tvQty = ViewBindings.findChildViewById(rootView, id);
      if (tvQty == null) {
        break missingId;
      }

      id = R.id.tvRefNo;
      TextView tvRefNo = ViewBindings.findChildViewById(rootView, id);
      if (tvRefNo == null) {
        break missingId;
      }

      id = R.id.tvRowNo;
      TextView tvRowNo = ViewBindings.findChildViewById(rootView, id);
      if (tvRowNo == null) {
        break missingId;
      }

      id = R.id.tvScanID;
      TextView tvScanID = ViewBindings.findChildViewById(rootView, id);
      if (tvScanID == null) {
        break missingId;
      }

      return new ScanviewListRowBinding((RelativeLayout) rootView, imageViewDelete, tvCarton,
          tvDeliveryDateContainer, tvModel, tvQty, tvRefNo, tvRowNo, tvScanID);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
