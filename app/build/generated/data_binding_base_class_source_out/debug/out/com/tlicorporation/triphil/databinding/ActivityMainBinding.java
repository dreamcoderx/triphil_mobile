// Generated by view binder compiler. Do not edit!
package com.tlicorporation.triphil.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.tlicorporation.triphil.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final TextInputEditText textInputEditTextLocation;

  @NonNull
  public final TextInputEditText textInputEditTextParts;

  @NonNull
  public final TextInputLayout textInputLayoutLocation;

  @NonNull
  public final TextInputLayout textInputLayoutParts;

  @NonNull
  public final AppCompatTextView textViewStatus;

  private ActivityMainBinding(@NonNull NestedScrollView rootView,
      @NonNull NestedScrollView nestedScrollView,
      @NonNull TextInputEditText textInputEditTextLocation,
      @NonNull TextInputEditText textInputEditTextParts,
      @NonNull TextInputLayout textInputLayoutLocation,
      @NonNull TextInputLayout textInputLayoutParts, @NonNull AppCompatTextView textViewStatus) {
    this.rootView = rootView;
    this.nestedScrollView = nestedScrollView;
    this.textInputEditTextLocation = textInputEditTextLocation;
    this.textInputEditTextParts = textInputEditTextParts;
    this.textInputLayoutLocation = textInputLayoutLocation;
    this.textInputLayoutParts = textInputLayoutParts;
    this.textViewStatus = textViewStatus;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      NestedScrollView nestedScrollView = (NestedScrollView) rootView;

      id = R.id.textInputEditTextLocation;
      TextInputEditText textInputEditTextLocation = ViewBindings.findChildViewById(rootView, id);
      if (textInputEditTextLocation == null) {
        break missingId;
      }

      id = R.id.textInputEditTextParts;
      TextInputEditText textInputEditTextParts = ViewBindings.findChildViewById(rootView, id);
      if (textInputEditTextParts == null) {
        break missingId;
      }

      id = R.id.textInputLayoutLocation;
      TextInputLayout textInputLayoutLocation = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayoutLocation == null) {
        break missingId;
      }

      id = R.id.textInputLayoutParts;
      TextInputLayout textInputLayoutParts = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayoutParts == null) {
        break missingId;
      }

      id = R.id.textViewStatus;
      AppCompatTextView textViewStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewStatus == null) {
        break missingId;
      }

      return new ActivityMainBinding((NestedScrollView) rootView, nestedScrollView,
          textInputEditTextLocation, textInputEditTextParts, textInputLayoutLocation,
          textInputLayoutParts, textViewStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
